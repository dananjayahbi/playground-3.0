1 [1, 2, 3].length; // 3

2 [1, 2, 3].push(4); // [1, 2, 3, 4] *

3 [1, 2, 3].unshift(0); // [0, 1, 2, 3] *

4 [1, 2, 3].pop(); // [1, 2]

5 [1, 2, 3].shift(); // [2, 3] *

6 [1, 2, 3].at(2); // 3

7 [1, 2, 3].indexOf(3); // 2

8 [1, 2, 3].includes(3); // true

9 [1, 2, 3].map((num) => num * 2); // [2, 4, 6]

10 [1, 2, 3].filter((num) => num > 1); // [2, 3]

11 [1, 2, 3].every((num) => num > 0); // true

12 [1, 2, 3].some((num) => num > 2); // true

13 [1, 2, 3].fill(0); // [0, 0, 0]

14 [1, 2, 3].reduce((acc, num) => acc + num, 0); // 6

15 [1, 2, 3].concat([4, 5]); // [1, 2, 3, 4, 5]

16 [1, 2, 3].reverse(); // [3, 2, 1]

17 [3, 2, 1].sort(); // [1, 2, 3]

18 [1, 2, 3].join("-"); // "1-2-3"

19 [1, 2, 3].flat(); // [1, 2, 3]

20 [1, 2, 3].find((num) => num === 1); // 1

21 [1, 2, 3].findIndex((num) => num === 2); // 1

22 [1, 2, 3].toString(); // "1,2,3"

23 [1, 2, 3].toLocaleString(); // "1,2,3"

24 [1, 2, 3].slice(1, 2); // [2]

25 [1, 2, 3].splice(1, 1, "a"); // [1, 'a', 3]

26 Array.isArray([1, 2, 3]); // true

27 Array.from("123"); // ['1', '2', '3']
